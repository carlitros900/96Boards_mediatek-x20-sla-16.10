/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2015. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 */

#ifndef DSP_SPH_INTF_H
#define DSP_SPH_INTF_H

#include "dpram.h"

#define MD1_DSP_SHERIF_BASE 0xB7200000
#define MD1_DSP_DM_BASE     0xB7200000
#define MD3_DSP_SHERIF_BASE 0xCD200000
#define MD3_DSP_DM_BASE     0xCD200000

typedef volatile unsigned short  *DMADDR;
typedef volatile unsigned short  *SHERIFADDR;
#define MD1_DSP_DM_ADDR(page,addr)   ((DMADDR)(MD1_DSP_DM_BASE+((page)<<16)+((addr)<<1)))
#define MD1_DSP_SHERIF_ADDR(addr)    ((SHERIFADDR)(MD1_DSP_SHERIF_BASE+((addr)<<1)))
#define MD3_DSP_DM_ADDR(page,addr)   ((DMADDR)(MD3_DSP_DM_BASE+((page)<<16)+((addr)<<1)))
#define MD3_DSP_SHERIF_ADDR(addr)    ((SHERIFADDR)(MD3_DSP_SHERIF_BASE+((addr)<<1)))
#define DSP_DM_PAGE 5

/* MD1 */
#define MD1_DSP_UL1_ADDR        (MD1_DSP_DM_ADDR(DSP_DM_PAGE, *(MD1_DSP_DM_ADDR(DSP_DM_PAGE, *MD1_DSP_SHERIF_ADDR(MD1_SPH_DM_ADDR_SE_PTR)))))
#define MD1_DSP_UL2_ADDR        (MD1_DSP_DM_ADDR(DSP_DM_PAGE, *(MD1_DSP_DM_ADDR(DSP_DM_PAGE, *MD1_DSP_SHERIF_ADDR(MD1_SPH_DM_ADDR_SE2_PTR)))))
#define MD1_DSP_UL3_ADDR        (MD1_DSP_DM_ADDR(DSP_DM_PAGE, *MD1_DSP_SHERIF_ADDR(MD1_SPH_DM_ADDR_SE3_BUF)))
#define MD1_DSP_DL_ADDR         (MD1_DSP_DM_ADDR(DSP_DM_PAGE, *(MD1_DSP_DM_ADDR(DSP_DM_PAGE, *MD1_DSP_SHERIF_ADDR(MD1_SPH_DM_ADDR_SD_PTR)))))
#define MD1_DSP_ECHO_REF_ADDR   (MD1_DSP_DM_ADDR(DSP_DM_PAGE, *MD1_DSP_SHERIF_ADDR(MD1_SPH_DM_ADDR_SE4_BUF)))
#define MD1_DSP_OD_MASK         (MD1_DSP_SHERIF_ADDR(MD1_SPH_OD_HANDSHAKE_OD))

#define MD1_DSP_SPH_OD_TCM_ADDR_H    (MD1_DSP_SHERIF_ADDR(MD1_SPH_OD_TCM_ADDR_H))
#define MD1_DSP_SPH_OD_TCM_ADDR_L    (MD1_DSP_SHERIF_ADDR(MD1_SPH_OD_TCM_ADDR_L))
#define MD1_DSP_SPH_OD_INT_CTRL2     (MD1_DSP_SHERIF_ADDR(MD1_SPH_OD_INT_CTRL2))

/* MD3 */
#define MD3_DSP_UL1_ADDR        (MD3_DSP_DM_ADDR(DSP_DM_PAGE, *(MD3_DSP_DM_ADDR(DSP_DM_PAGE, *MD3_DSP_SHERIF_ADDR(MD3_SPH_DM_ADDR_SE_PTR)))))
#define MD3_DSP_UL2_ADDR        (MD3_DSP_DM_ADDR(DSP_DM_PAGE, *(MD3_DSP_DM_ADDR(DSP_DM_PAGE, *MD3_DSP_SHERIF_ADDR(MD3_SPH_DM_ADDR_SE2_PTR)))))
#define MD3_DSP_DL_ADDR         (MD3_DSP_DM_ADDR(DSP_DM_PAGE, *(MD3_DSP_DM_ADDR(DSP_DM_PAGE, *MD3_DSP_SHERIF_ADDR(MD3_SPH_DM_ADDR_SD_PTR)))))
#define MD3_DSP_ECHO_REF_ADDR   (MD3_DSP_DM_ADDR(DSP_DM_PAGE, *MD3_DSP_SHERIF_ADDR(MD3_SPH_DM_ADDR_SE3_BUF)))
#define MD3_DSP_OD_MASK         (MD3_DSP_SHERIF_ADDR(MD3_SPH_OD_HANDSHAKE_OD))

#define MD3_DSP_SPH_OD_TCM_ADDR_H    (MD3_DSP_SHERIF_ADDR(MD3_SPH_OD_TCM_ADDR_H))
#define MD3_DSP_SPH_OD_TCM_ADDR_L    (MD3_DSP_SHERIF_ADDR(MD3_SPH_OD_TCM_ADDR_L))
#define MD3_DSP_SPH_OD_INT_CTRL2     (MD3_DSP_SHERIF_ADDR(MD3_SPH_OD_INT_CTRL2))



/* wrapper for modem 1 & 3 */
enum modem_index_t {
    MODEM_1 = 0,
    MODEM_2 = 1,
    MODEM_EXTERNAL = 2,
    NUM_MODEM
};

uint8_t modem_index;


#define DSP_OD_MASK \
    (((modem_index) == MODEM_1) ? MD1_DSP_OD_MASK : MD3_DSP_OD_MASK)

#define DSP_SPH_OD_INT_CTRL2 \
    (((modem_index) == MODEM_1) ? MD1_DSP_SPH_OD_INT_CTRL2 : MD3_DSP_SPH_OD_INT_CTRL2)

#define DSP_SPH_OD_TCM_ADDR_H \
    (((modem_index) == MODEM_1) ? MD1_DSP_SPH_OD_TCM_ADDR_H : MD3_DSP_SPH_OD_TCM_ADDR_H)

#define DSP_SPH_OD_TCM_ADDR_L \
    (((modem_index) == MODEM_1) ? MD1_DSP_SPH_OD_TCM_ADDR_L : MD3_DSP_SPH_OD_TCM_ADDR_L)

#define DSP_DL_ADDR \
    (((modem_index) == MODEM_1) ? MD1_DSP_DL_ADDR : MD3_DSP_DL_ADDR)

#define DSP_UL1_ADDR \
    (((modem_index) == MODEM_1) ? MD1_DSP_UL1_ADDR : MD3_DSP_UL1_ADDR)

#define DSP_UL2_ADDR \
    (((modem_index) == MODEM_1) ? MD1_DSP_UL2_ADDR : MD3_DSP_UL2_ADDR)

#define DSP_ECHO_REF_ADDR \
    (((modem_index) == MODEM_1) ? MD1_DSP_ECHO_REF_ADDR : MD3_DSP_ECHO_REF_ADDR)



//Usage example
/*
speech buffer:

for(i=0; i<len; i++)
{
    *data = *DSP_UL1_ADDR;
    DSP_UL1_ADDR++;
}
*/

#endif
